/*
 * Copyright (C) 2001 Iowa State University
 *
 * This file is part of JML
 *
 * JML is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2, or (at your option)
 * any later version.
 *
 * JML is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with JML; see the file COPYING.  If not, write to
 * the Free Software Foundation, 675 Mass Ave, Cambridge, MA 02139, USA.
 *
 * $Id: RacNode.java,v 1.3 2002/07/26 14:09:12 cheon Exp $
 */

package org.jmlspecs.ajmlrac;

import org.multijava.mjc.MjcVisitor;
import java.util.Iterator;

/**
 * An abstraction of RAC AST nodes. This type defines a common interface
 * that all RAC AST nodes have to implement. A RAC node is a special form
 * of AST node used to store assertion check code generated by the runtime
 * assertion checker. The idea is to store the generated code in verbatim,
 * intermixed with the regular JML AST nodes, and let visitor objects 
 * pretty-print them correctly. Since the only next step after assertion code
 * generation is pretty-printing, we can store the code in verbatim.
 * 
 * @see RacParser
 *
 * @author Yoonsik Cheon
 * @version $Revision: 1.3 $
 */

public interface RacNode {

    /** Returns the current indentation level of this node. */
    int indent();
    
    /** Increments indentation level of this node . */
    RacNode incrIndent();

    /** Returns an interator that iterates over elements (sequence of
     * RAC nodes) of this node. */
    Iterator iterator();
    
    /** Accepts the specified visitor. This method implements
     * the Visistor Design Pattern [GoF94]. */
    void accept(MjcVisitor p);

    /** Returns the name of this node. */
    String name();

    /** Sets the name of this node. */
    void setName(String name);

    /** Sets the variable declaration to be piggyback with this code.
     * 
     * @see #varDecl()
     */
    void setVarDecl(PreValueVars.Entry varDecl);
    
    /** Returns the variable declaration associated with this
     * code. This method is used to piggyback a variable declaration
     * with this code.
     * 
     * @see #setVarDecl(PreValueVars.Entry)
     */
    PreValueVars.Entry varDecl();
}
