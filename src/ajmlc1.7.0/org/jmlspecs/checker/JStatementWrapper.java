/*
 * Copyright (C) 2002 Iowa State University
 *
 * This file is part of mjc, the MultiJava Compiler, and the JML Project.
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA
 *
 * $Id: JStatementWrapper.java,v 1.4 2006/12/20 06:16:00 perryjames Exp $
 */

package org.jmlspecs.checker;

import org.multijava.mjc.*;
import org.multijava.util.compiler.TokenReference;
import org.multijava.util.compiler.JavaStyleComment;

/**
 * An abstraction of JML statement ASTs that should be subclass of
 * {@link JStatement}. This class provides a placeholder for 
 * JML-specific manipulation of <code>JStatement</code> objects.
 *
 * @author Yoonsik Cheon
 * @version $Revision: 1.4 $
 */

public abstract class JStatementWrapper extends JStatement 
    implements Constants {

    //---------------------------------------------------------------------
    // CONSTRUCTORS 
    //---------------------------------------------------------------------

    /**
     * Construct a node in the parsing tree
     * @param where 	the line of this node in the source code
     * @param comments	the Java comments that go with this statement
     */
    protected JStatementWrapper(/*@ non_null */ TokenReference where, 
    							/*@ non_null */ JavaStyleComment[] comments ) {
	super(where, comments);
    }
    
    //---------------------------------------------------------------------
    // ACCESSORS
    //---------------------------------------------------------------------

    /** 
     * Returns the Java source code generated by jmlrac to check this
     * assertion at runtime. The return value may be
     * <code>null</code>. 
     *
     * <pre><jml>
     * ensures \result == assertionCode;
     * </jml></pre>
     */
    public /*@ pure @*/ JStatement assertionCode() {
	return assertionCode;
    }

    /** 
     * Returns <code>true</code> if this assertion has the Java source 
     * code generated by jmlrac to check the assertion at runtime. 
     *
     * <pre><jml>
     * ensures \result == (assertionCode != null);
     * </jml></pre>
     */
    public /*@ pure @*/ boolean hasAssertionCode() {
	return assertionCode != null;
    }

    /** 
     * Sets the Java source code generated by jmlrac to check 
     * this assertion at runtime. 
     *
     * <pre><jml>
     * assignable assertionCode;
     * ensures assertionCode == code;
     * </jml></pre>
     */
    public void setAssertionCode(JStatement code) {
	assertionCode = code;
    }

    //---------------------------------------------------------------------
    // DERIVED ATTRIBUTES
    //---------------------------------------------------------------------

    //---------------------------------------------------------------------
    // INTERFACE CHECKING
    //---------------------------------------------------------------------

    //---------------------------------------------------------------------
    // TYPECHECKING
    //---------------------------------------------------------------------

    /** 
     * Enters a new JML specification scope if the argument contains 
     * the "model" modifier. 
     *
     * @see JmlContext#enterSpecScope()
     * @see JStatementWrapper#enterSpecScope(int)
     */
    public static void enterSpecScope(int modifiers) {
	if (hasFlag(modifiers, ACC_MODEL)) {
	    JmlContext.enterSpecScope();
	}
    }

    /** 
     * Enters a new JML specification scope.
     *
     * @see JmlContext#enterSpecScope()
     * @see JStatementWrapper#enterSpecScope()
     */
    public static void enterSpecScope() {
	    JmlContext.enterSpecScope();
    }

    /** 
     * Exits the current JML specification scope if the argument contains 
     * the "model" modifier.
     *
     * @see JmlContext#exitSpecScope()
     * @see JStatementWrapper#exitSpecScope(int)
     */
    public static void exitSpecScope(int modifiers) {
	if (hasFlag(modifiers, ACC_MODEL)) {
	    JmlContext.exitSpecScope();
	}
    }

    /** 
     * Exits the current JML specification scope.
     *
     * @see JmlContext#exitSpecScope()
     * @see JStatementWrapper#exitSpecScope()
     */
    public static void exitSpecScope() {
	JmlContext.exitSpecScope();
    }

    //---------------------------------------------------------------------
    // DATA MEMBERS
    //---------------------------------------------------------------------

    /** Java source code generated by jmlrac to check the assertion
     * at runtime. */
    /*@ spec_public @*/ private JStatement assertionCode;
}
