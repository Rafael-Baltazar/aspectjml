/*
 * Copyright (C) 2000-2001 Iowa State University
 *
 * This file is part of mjc, the MultiJava Compiler, and the JML Project.
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA
 *
 * $Id: JmlSetStatement.java,v 1.14 2005/04/26 02:40:17 kui_dai Exp $
 */

package org.jmlspecs.checker;

import org.jmlspecs.util.classfile.*;
import org.multijava.mjc.*;
import org.multijava.util.compiler.TokenReference;
import org.multijava.util.compiler.JavaStyleComment;
import org.multijava.util.compiler.PositionedError;

/**
 * JmlSetStatement.java
 *
 * @author Curtis Clifton
 * @version $Revision: 1.14 $
 */

public class JmlSetStatement extends JStatementWrapper {

    //---------------------------------------------------------------------
    // CONSTRUCTORS 
    //---------------------------------------------------------------------
    public JmlSetStatement( TokenReference where, 
			    JExpression assignmentExpression,
			    JavaStyleComment[] comments ) 
    {
	super( where, comments );
	this.assignmentExpression = assignmentExpression;
    }
    
    //---------------------------------------------------------------------
    // ACCESSORS
    //---------------------------------------------------------------------

    /** Returns the assignment expression of this set statement. */
    public /*@ pure @*/ JExpression assignmentExpression() {
	return assignmentExpression;
    }

    /** 
     * Returns the Java source code generated by jmlrac to execute
     * this set statement at runtime. */
    public /*@ pure @*/ JStatement assertionCode() {
	return assertionCode;
    }

    /** 
     * Returns <code>true</code> if this set statement has the Java
     * source code generated by jmlrac to execute it at runtime. */
    public /*@ pure @*/ boolean hasAssertionCode() {
	return assertionCode != null;
    }

    /** 
     * Sets the Java source code generated by jmlrac to execute
     * this set statement at runtime. */
    public void setAssertionCode(JStatement code) {
	assertionCode = code;
    }

    //---------------------------------------------------------------------
    // DERIVED ATTRIBUTES
    //---------------------------------------------------------------------

    //---------------------------------------------------------------------
    // INTERFACE CHECKING
    //---------------------------------------------------------------------

    //---------------------------------------------------------------------
    // TYPECHECKING
    //---------------------------------------------------------------------

    public void typecheck( CFlowControlContextType context ) 
	throws PositionedError 
    {
        try {
            enterSpecScope();

            JmlExpressionContext ectx = 
                JmlExpressionContext.createIntracondition(context);
            assignmentExpression = assignmentExpression.typecheck(ectx);

            // Perhaps, this is guaranteed by JML parser.
            //@ assume assignmentExpression instanceof JAssignmentExpression;
	    check(context, 
                  assignmentExpression instanceof JAssignmentExpression,
                  JmlMessages.SET_STATEMENT);

            JAssignmentExpression expr = 
                (JAssignmentExpression) assignmentExpression;
            
            // Check if the left-hand-side of the assignment
            // expression is a reference to a ghost field
            check(context, 
                  isGhostFieldReference(expr.left()),
                  JmlMessages.LHS_OF_SET_STATEMENT);
                  
            // Perhaps, this should be allowed in the future, but
            // currently don't allow cascaded assignment expressions
            // such as "set x = y = z;".
            check(context, 
                  !(expr.right() instanceof JAssignmentExpression),
                  JmlMessages.RHS_OF_SET_STATEMENT);

            // We decided to not do purity checking for set statements.
            // check purity of RHS of the assignment expression
            //JmlExpressionChecker.perform(ectx, expr.right());
            
//          no support in AspectJML --- [[[hemr]]]
            check(context, 
                    false,
                    JmlMessages.NO_SUPPORT_SET_STATEMENT);
        }
        finally {
            exitSpecScope();
        }
    }
    
    /**
     * Returns <code>true</code> if the given expression,
     * <code>expr</code> is a reference to a ghost field.
     */
    public static /*@ pure @*/ boolean isGhostFieldReference(
        JExpression expr) {
        if (expr instanceof JClassFieldExpression) {
            CFieldAccessor field = ((JClassFieldExpression)expr).getField();
            return (field instanceof JmlModifiable) 
                && ((JmlModifiable) field).isGhost();
        } else if (expr instanceof JLocalVariableExpression) {
            JLocalVariable var = ((JLocalVariableExpression)expr).variable();
	    long modifiers = var.modifiers();
	    return hasFlag(modifiers, ACC_GHOST);
        }
        return false;
    }

    //---------------------------------------------------------------------
    // CODE GENERATION
    //---------------------------------------------------------------------

    public void genCode( CodeSequence code ) {
	//fail( "code generation not implemented for set-statement" );
    }

    /**
     * Accepts the specified visitor.
     * @param p	the visitor
     */
    public void accept( MjcVisitor p ) {
	if (p instanceof JmlVisitor)
	    ((JmlVisitor)p).visitJmlSetStatement(this);
	else
	    throw new UnsupportedOperationException(JmlNode.MJCVISIT_MESSAGE);
    }

    //---------------------------------------------------------------------
    // PRIVILEGED DATA
    //---------------------------------------------------------------------

    private JExpression assignmentExpression;

    /** Java source code generated by jmlrac to execute this set
     * statement at runtime. */
    private JStatement assertionCode;
    //@                in super.assertionCode;
}
