// Generated by lexgen
package org.jmlspecs.checker;
import org.multijava.util.compiler.CToken;

/*package*/ final class JmlIDKeywords implements JmlIDTokenTypes {
  public static CToken lookup(final char[] data, int offset, int length) {
    return tokens[find(data, offset, length) + 1];
  }
  private static final CToken[] tokens = new CToken[] {
    null,
    new CToken(LITERAL_abstract, "abstract", 0),
    new CToken(LITERAL_assert, "assert", 0),
    new CToken(LITERAL_boolean, "boolean", 0),
    new CToken(LITERAL_break, "break", 0),
    new CToken(LITERAL_byte, "byte", 0),
    new CToken(LITERAL_case, "case", 0),
    new CToken(LITERAL_catch, "catch", 0),
    new CToken(LITERAL_char, "char", 0),
    new CToken(LITERAL_class, "class", 0),
    new CToken(LITERAL_const, "const", 0),
    new CToken(LITERAL_continue, "continue", 0),
    new CToken(LITERAL_default, "default", 0),
    new CToken(LITERAL_do, "do", 0),
    new CToken(LITERAL_double, "double", 0),
    new CToken(LITERAL_else, "else", 0),
    new CToken(LITERAL_extends, "extends", 0),
    new CToken(LITERAL_false, "false", 0),
    new CToken(LITERAL_final, "final", 0),
    new CToken(LITERAL_finally, "finally", 0),
    new CToken(LITERAL_float, "float", 0),
    new CToken(LITERAL_for, "for", 0),
    new CToken(LITERAL_goto, "goto", 0),
    new CToken(LITERAL_if, "if", 0),
    new CToken(LITERAL_implements, "implements", 0),
    new CToken(LITERAL_import, "import", 0),
    new CToken(LITERAL_instanceof, "instanceof", 0),
    new CToken(LITERAL_int, "int", 0),
    new CToken(LITERAL_interface, "interface", 0),
    new CToken(LITERAL_long, "long", 0),
    new CToken(LITERAL_native, "native", 0),
    new CToken(LITERAL_new, "new", 0),
    new CToken(LITERAL_null, "null", 0),
    new CToken(LITERAL_package, "package", 0),
    new CToken(LITERAL_private, "private", 0),
    new CToken(LITERAL_protected, "protected", 0),
    new CToken(LITERAL_public, "public", 0),
    new CToken(LITERAL_peer, "peer", 0),
    new CToken(LITERAL_readonly, "readonly", 0),
    new CToken(LITERAL_rep, "rep", 0),
    new CToken(LITERAL_pure, "pure", 0),
    new CToken(LITERAL_resend, "resend", 0),
    new CToken(LITERAL_return, "return", 0),
    new CToken(LITERAL_short, "short", 0),
    new CToken(LITERAL_static, "static", 0),
    new CToken(LITERAL_strictfp, "strictfp", 0),
    new CToken(LITERAL_super, "super", 0),
    new CToken(LITERAL_switch, "switch", 0),
    new CToken(LITERAL_synchronized, "synchronized", 0),
    new CToken(LITERAL_this, "this", 0),
    new CToken(LITERAL_throw, "throw", 0),
    new CToken(LITERAL_throws, "throws", 0),
    new CToken(LITERAL_transient, "transient", 0),
    new CToken(LITERAL_true, "true", 0),
    new CToken(LITERAL_try, "try", 0),
    new CToken(LITERAL_void, "void", 0),
    new CToken(LITERAL_volatile, "volatile", 0),
    new CToken(LITERAL_while, "while", 0),
    new CToken(LITERAL__warn, "_warn", 0),
    new CToken(LITERAL__warn_op, "_warn_op", 0),
    new CToken(LITERAL__nowarn, "_nowarn", 0),
    new CToken(LITERAL__nowarn_op, "_nowarn_op", 0),
    new CToken(LITERAL_BS_TYPE, "\\TYPE", 0),
    new CToken(LITERAL_BS_bigint, "\\bigint", 0),
    new CToken(LITERAL_BS_bigint_math, "\\bigint_math", 0),
    new CToken(LITERAL_BS_duration, "\\duration", 0),
    new CToken(LITERAL_BS_elemtype, "\\elemtype", 0),
    new CToken(LITERAL_BS_everything, "\\everything", 0),
    new CToken(LITERAL_BS_exists, "\\exists", 2),
    new CToken(LITERAL_BS_forall, "\\forall", 2),
    new CToken(LITERAL_BS_fresh, "\\fresh", 0),
    new CToken(LITERAL_BS_into, "\\into", 0),
    new CToken(LITERAL_BS_invariant_for, "\\invariant_for", 0),
    new CToken(LITERAL_BS_is_initialized, "\\is_initialized", 0),
    new CToken(LITERAL_BS_java_math, "\\java_math", 0),
    new CToken(LITERAL_BS_lblneg, "\\lblneg", 0),
    new CToken(LITERAL_BS_lblpos, "\\lblpos", 0),
    new CToken(LITERAL_BS_lockset, "\\lockset", 0),
    new CToken(LITERAL_BS_max, "\\max", 2),
    new CToken(LITERAL_BS_min, "\\min", 2),
    new CToken(LITERAL_BS_nonnullelements, "\\nonnullelements", 0),
    new CToken(LITERAL_BS_not_modified, "\\not_modified", 0),
    new CToken(LITERAL_BS_not_assigned, "\\not_assigned", 0),
    new CToken(LITERAL_BS_not_specified, "\\not_specified", 0),
    new CToken(LITERAL_BS_nothing, "\\nothing", 0),
    new CToken(LITERAL_BS_nowarn, "\\nowarn", 0),
    new CToken(LITERAL_BS_nowarn_op, "\\nowarn_op", 0),
    new CToken(LITERAL_BS_num_of, "\\num_of", 2),
    new CToken(LITERAL_BS_old, "\\old", 0),
    new CToken(LITERAL_BS_only_assigned, "\\only_assigned", 0),
    new CToken(LITERAL_BS_only_accessed, "\\only_accessed", 0),
    new CToken(LITERAL_BS_only_called, "\\only_called", 0),
    new CToken(LITERAL_BS_only_captured, "\\only_captured", 0),
    new CToken(LITERAL_BS_other, "\\other", 0),
    new CToken(LITERAL_BS_pre, "\\pre", 0),
    new CToken(LITERAL_BS_product, "\\product", 2),
    new CToken(LITERAL_BS_reach, "\\reach", 0),
    new CToken(LITERAL_BS_real, "\\real", 0),
    new CToken(LITERAL_BS_result, "\\result", 0),
    new CToken(LITERAL_BS_safe_math, "\\safe_math", 0),
    new CToken(LITERAL_BS_same, "\\same", 0),
    new CToken(LITERAL_BS_space, "\\space", 0),
    new CToken(LITERAL_BS_such_that, "\\such_that", 0),
    new CToken(LITERAL_BS_sum, "\\sum", 2),
    new CToken(LITERAL_BS_type, "\\type", 0),
    new CToken(LITERAL_BS_typeof, "\\typeof", 0),
    new CToken(LITERAL_BS_warn, "\\warn", 0),
    new CToken(LITERAL_BS_warn_op, "\\warn_op", 0),
    new CToken(LITERAL_BS_working_space, "\\working_space", 0),
    new CToken(LITERAL_U_peer, "\\peer", 0),
    new CToken(LITERAL_U_rep, "\\rep", 0),
    new CToken(LITERAL_U_readonly, "\\readonly", 0),
    new CToken(LITERAL_abrupt_behavior, "abrupt_behavior", 0),
    new CToken(LITERAL_abrupt_behaviour, "abrupt_behaviour", 0),
    new CToken(LITERAL_accessible, "accessible", 4),
    new CToken(LITERAL_accessible_redundantly, "accessible_redundantly", 4),
    new CToken(LITERAL_also, "also", 0),
    new CToken(LITERAL_assert_redundantly, "assert_redundantly", 4),
    new CToken(LITERAL_assignable, "assignable", 4),
    new CToken(LITERAL_assignable_redundantly, "assignable_redundantly", 4),
    new CToken(LITERAL_assume, "assume", 4),
    new CToken(LITERAL_assume_redundantly, "assume_redundantly", 4),
    new CToken(LITERAL_axiom, "axiom", 4),
    new CToken(LITERAL_behavior, "behavior", 0),
    new CToken(LITERAL_behaviour, "behaviour", 0),
    new CToken(LITERAL_breaks, "breaks", 4),
    new CToken(LITERAL_breaks_redundantly, "breaks_redundantly", 4),
    new CToken(LITERAL_callable, "callable", 4),
    new CToken(LITERAL_callable_redundantly, "callable_redundantly", 4),
    new CToken(LITERAL_captures, "captures", 4),
    new CToken(LITERAL_captures_redundantly, "captures_redundantly", 4),
    new CToken(LITERAL_choose, "choose", 0),
    new CToken(LITERAL_choose_if, "choose_if", 0),
    new CToken(LITERAL_code, "code", 0),
    new CToken(LITERAL_code_bigint_math, "code_bigint_math", 0),
    new CToken(LITERAL_code_contract, "code_contract", 0),
    new CToken(LITERAL_code_java_math, "code_java_math", 0),
    new CToken(LITERAL_code_safe_math, "code_safe_math", 0),
    new CToken(LITERAL_constraint, "constraint", 4),
    new CToken(LITERAL_constraint_redundantly, "constraint_redundantly", 4),
    new CToken(LITERAL_constructor, "constructor", 4),
    new CToken(LITERAL_continues, "continues", 4),
    new CToken(LITERAL_continues_redundantly, "continues_redundantly", 4),
    new CToken(LITERAL_debug, "debug", 4),
    new CToken(LITERAL_decreases, "decreases", 4),
    new CToken(LITERAL_decreases_redundantly, "decreases_redundantly", 4),
    new CToken(LITERAL_decreasing, "decreasing", 4),
    new CToken(LITERAL_decreasing_redundantly, "decreasing_redundantly", 4),
    new CToken(LITERAL_diverges, "diverges", 4),
    new CToken(LITERAL_diverges_redundantly, "diverges_redundantly", 4),
    new CToken(LITERAL_duration, "duration", 4),
    new CToken(LITERAL_duration_redundantly, "duration_redundantly", 4),
    new CToken(LITERAL_ensures, "ensures", 4),
    new CToken(LITERAL_ensures_redundantly, "ensures_redundantly", 4),
    new CToken(LITERAL_example, "example", 0),
    new CToken(LITERAL_exceptional_behavior, "exceptional_behavior", 0),
    new CToken(LITERAL_exceptional_behaviour, "exceptional_behaviour", 0),
    new CToken(LITERAL_exceptional_example, "exceptional_example", 0),
    new CToken(LITERAL_exsures, "exsures", 4),
    new CToken(LITERAL_exsures_redundantly, "exsures_redundantly", 4),
    new CToken(LITERAL_extract, "extract", 0),
    new CToken(LITERAL_field, "field", 4),
    new CToken(LITERAL_forall, "forall", 0),
    new CToken(LITERAL_for_example, "for_example", 0),
    new CToken(LITERAL_ghost, "ghost", 0),
    new CToken(LITERAL_helper, "helper", 0),
    new CToken(LITERAL_hence_by, "hence_by", 4),
    new CToken(LITERAL_hence_by_redundantly, "hence_by_redundantly", 4),
    new CToken(LITERAL_implies_that, "implies_that", 0),
    new CToken(LITERAL_in, "in", 4),
    new CToken(LITERAL_in_redundantly, "in_redundantly", 4),
    new CToken(LITERAL_initializer, "initializer", 0),
    new CToken(LITERAL_initially, "initially", 4),
    new CToken(LITERAL_instance, "instance", 0),
    new CToken(LITERAL_invariant, "invariant", 4),
    new CToken(LITERAL_invariant_redundantly, "invariant_redundantly", 4),
    new CToken(LITERAL_loop_invariant, "loop_invariant", 4),
    new CToken(LITERAL_loop_invariant_redundantly, "loop_invariant_redundantly", 4),
    new CToken(LITERAL_maintaining, "maintaining", 4),
    new CToken(LITERAL_maintaining_redundantly, "maintaining_redundantly", 4),
    new CToken(LITERAL_maps, "maps", 4),
    new CToken(LITERAL_maps_redundantly, "maps_redundantly", 4),
    new CToken(LITERAL_measured_by, "measured_by", 4),
    new CToken(LITERAL_measured_by_redundantly, "measured_by_redundantly", 4),
    new CToken(LITERAL_method, "method", 4),
    new CToken(LITERAL_model, "model", 0),
    new CToken(LITERAL_model_program, "model_program", 0),
    new CToken(LITERAL_modifiable, "modifiable", 4),
    new CToken(LITERAL_modifiable_redundantly, "modifiable_redundantly", 4),
    new CToken(LITERAL_modifies, "modifies", 4),
    new CToken(LITERAL_modifies_redundantly, "modifies_redundantly", 4),
    new CToken(LITERAL_monitored, "monitored", 0),
    new CToken(LITERAL_monitors_for, "monitors_for", 4),
    new CToken(LITERAL_non_null, "non_null", 0),
    new CToken(LITERAL_non_null_by_default, "non_null_by_default", 0),
    new CToken(LITERAL_normal_behavior, "normal_behavior", 0),
    new CToken(LITERAL_normal_behaviour, "normal_behaviour", 0),
    new CToken(LITERAL_normal_example, "normal_example", 0),
    new CToken(LITERAL_nullable, "nullable", 0),
    new CToken(LITERAL_nullable_by_default, "nullable_by_default", 0),
    new CToken(LITERAL_old, "old", 4),
    new CToken(LITERAL_or, "or", 0),
    new CToken(LITERAL_post, "post", 4),
    new CToken(LITERAL_post_redundantly, "post_redundantly", 4),
    new CToken(LITERAL_pre, "pre", 4),
    new CToken(LITERAL_pre_redundantly, "pre_redundantly", 4),
    new CToken(LITERAL_query, "query", 0),
    new CToken(LITERAL_readable, "readable", 4),
    new CToken(LITERAL_refine, "refine", 4),
    new CToken(LITERAL_refines, "refines", 4),
    new CToken(LITERAL_refining, "refining", 0),
    new CToken(LITERAL_represents, "represents", 4),
    new CToken(LITERAL_represents_redundantly, "represents_redundantly", 4),
    new CToken(LITERAL_requires, "requires", 4),
    new CToken(LITERAL_requires_redundantly, "requires_redundantly", 4),
    new CToken(LITERAL_returns, "returns", 4),
    new CToken(LITERAL_returns_redundantly, "returns_redundantly", 4),
    new CToken(LITERAL_secret, "secret", 0),
    new CToken(LITERAL_set, "set", 4),
    new CToken(LITERAL_signals, "signals", 4),
    new CToken(LITERAL_signals_only, "signals_only", 4),
    new CToken(LITERAL_signals_only_redundantly, "signals_only_redundantly", 4),
    new CToken(LITERAL_signals_redundantly, "signals_redundantly", 4),
    new CToken(LITERAL_spec_bigint_math, "spec_bigint_math", 0),
    new CToken(LITERAL_spec_java_math, "spec_java_math", 0),
    new CToken(LITERAL_spec_protected, "spec_protected", 0),
    new CToken(LITERAL_spec_public, "spec_public", 0),
    new CToken(LITERAL_spec_safe_math, "spec_safe_math", 0),
    new CToken(LITERAL_static_initializer, "static_initializer", 0),
    new CToken(LITERAL_uninitialized, "uninitialized", 0),
    new CToken(LITERAL_unreachable, "unreachable", 4),
    new CToken(LITERAL_weakly, "weakly", 0),
    new CToken(LITERAL_when, "when", 4),
    new CToken(LITERAL_when_redundantly, "when_redundantly", 4),
    new CToken(LITERAL_working_space, "working_space", 4),
    new CToken(LITERAL_working_space_redundantly, "working_space_redundantly", 4),
    new CToken(LITERAL_writable, "writable", 4)
  };
  public final static int INSIDE_ANNOTATION = 1;
  public final static int QUANTIFIER = 2;
  public final static int IGNORE_JML_ID_AFTER = 4;

 // --------------------------------------------------------------------
 // CODE GENERATED BY JPERF STARTS HERE

  private static final int MAX_GRAPH_NODE_VAL = 492;

  private static final int MIN_CHAR_VAL = 'E';
  private static final int MAX_CHAR_VAL = 'z';
  private static final int MIN_WORD_LENG = 2;
  private static final int MAX_WORD_LENG = 26;
  private static final int TOTAL_KEYWORDS = 236;
  private static final char[][] keywords = new char[][] {
    "abstract".toCharArray(),
    "assert".toCharArray(),
    "boolean".toCharArray(),
    "break".toCharArray(),
    "byte".toCharArray(),
    "case".toCharArray(),
    "catch".toCharArray(),
    "char".toCharArray(),
    "class".toCharArray(),
    "const".toCharArray(),
    "continue".toCharArray(),
    "default".toCharArray(),
    "do".toCharArray(),
    "double".toCharArray(),
    "else".toCharArray(),
    "extends".toCharArray(),
    "false".toCharArray(),
    "final".toCharArray(),
    "finally".toCharArray(),
    "float".toCharArray(),
    "for".toCharArray(),
    "goto".toCharArray(),
    "if".toCharArray(),
    "implements".toCharArray(),
    "import".toCharArray(),
    "instanceof".toCharArray(),
    "int".toCharArray(),
    "interface".toCharArray(),
    "long".toCharArray(),
    "native".toCharArray(),
    "new".toCharArray(),
    "null".toCharArray(),
    "package".toCharArray(),
    "private".toCharArray(),
    "protected".toCharArray(),
    "public".toCharArray(),
    "peer".toCharArray(),
    "readonly".toCharArray(),
    "rep".toCharArray(),
    "pure".toCharArray(),
    "resend".toCharArray(),
    "return".toCharArray(),
    "short".toCharArray(),
    "static".toCharArray(),
    "strictfp".toCharArray(),
    "super".toCharArray(),
    "switch".toCharArray(),
    "synchronized".toCharArray(),
    "this".toCharArray(),
    "throw".toCharArray(),
    "throws".toCharArray(),
    "transient".toCharArray(),
    "true".toCharArray(),
    "try".toCharArray(),
    "void".toCharArray(),
    "volatile".toCharArray(),
    "while".toCharArray(),
    "_warn".toCharArray(),
    "_warn_op".toCharArray(),
    "_nowarn".toCharArray(),
    "_nowarn_op".toCharArray(),
    "\\TYPE".toCharArray(),
    "\\bigint".toCharArray(),
    "\\bigint_math".toCharArray(),
    "\\duration".toCharArray(),
    "\\elemtype".toCharArray(),
    "\\everything".toCharArray(),
    "\\exists".toCharArray(),
    "\\forall".toCharArray(),
    "\\fresh".toCharArray(),
    "\\into".toCharArray(),
    "\\invariant_for".toCharArray(),
    "\\is_initialized".toCharArray(),
    "\\java_math".toCharArray(),
    "\\lblneg".toCharArray(),
    "\\lblpos".toCharArray(),
    "\\lockset".toCharArray(),
    "\\max".toCharArray(),
    "\\min".toCharArray(),
    "\\nonnullelements".toCharArray(),
    "\\not_modified".toCharArray(),
    "\\not_assigned".toCharArray(),
    "\\not_specified".toCharArray(),
    "\\nothing".toCharArray(),
    "\\nowarn".toCharArray(),
    "\\nowarn_op".toCharArray(),
    "\\num_of".toCharArray(),
    "\\old".toCharArray(),
    "\\only_assigned".toCharArray(),
    "\\only_accessed".toCharArray(),
    "\\only_called".toCharArray(),
    "\\only_captured".toCharArray(),
    "\\other".toCharArray(),
    "\\pre".toCharArray(),
    "\\product".toCharArray(),
    "\\reach".toCharArray(),
    "\\real".toCharArray(),
    "\\result".toCharArray(),
    "\\safe_math".toCharArray(),
    "\\same".toCharArray(),
    "\\space".toCharArray(),
    "\\such_that".toCharArray(),
    "\\sum".toCharArray(),
    "\\type".toCharArray(),
    "\\typeof".toCharArray(),
    "\\warn".toCharArray(),
    "\\warn_op".toCharArray(),
    "\\working_space".toCharArray(),
    "\\peer".toCharArray(),
    "\\rep".toCharArray(),
    "\\readonly".toCharArray(),
    "abrupt_behavior".toCharArray(),
    "abrupt_behaviour".toCharArray(),
    "accessible".toCharArray(),
    "accessible_redundantly".toCharArray(),
    "also".toCharArray(),
    "assert_redundantly".toCharArray(),
    "assignable".toCharArray(),
    "assignable_redundantly".toCharArray(),
    "assume".toCharArray(),
    "assume_redundantly".toCharArray(),
    "axiom".toCharArray(),
    "behavior".toCharArray(),
    "behaviour".toCharArray(),
    "breaks".toCharArray(),
    "breaks_redundantly".toCharArray(),
    "callable".toCharArray(),
    "callable_redundantly".toCharArray(),
    "captures".toCharArray(),
    "captures_redundantly".toCharArray(),
    "choose".toCharArray(),
    "choose_if".toCharArray(),
    "code".toCharArray(),
    "code_bigint_math".toCharArray(),
    "code_contract".toCharArray(),
    "code_java_math".toCharArray(),
    "code_safe_math".toCharArray(),
    "constraint".toCharArray(),
    "constraint_redundantly".toCharArray(),
    "constructor".toCharArray(),
    "continues".toCharArray(),
    "continues_redundantly".toCharArray(),
    "debug".toCharArray(),
    "decreases".toCharArray(),
    "decreases_redundantly".toCharArray(),
    "decreasing".toCharArray(),
    "decreasing_redundantly".toCharArray(),
    "diverges".toCharArray(),
    "diverges_redundantly".toCharArray(),
    "duration".toCharArray(),
    "duration_redundantly".toCharArray(),
    "ensures".toCharArray(),
    "ensures_redundantly".toCharArray(),
    "example".toCharArray(),
    "exceptional_behavior".toCharArray(),
    "exceptional_behaviour".toCharArray(),
    "exceptional_example".toCharArray(),
    "exsures".toCharArray(),
    "exsures_redundantly".toCharArray(),
    "extract".toCharArray(),
    "field".toCharArray(),
    "forall".toCharArray(),
    "for_example".toCharArray(),
    "ghost".toCharArray(),
    "helper".toCharArray(),
    "hence_by".toCharArray(),
    "hence_by_redundantly".toCharArray(),
    "implies_that".toCharArray(),
    "in".toCharArray(),
    "in_redundantly".toCharArray(),
    "initializer".toCharArray(),
    "initially".toCharArray(),
    "instance".toCharArray(),
    "invariant".toCharArray(),
    "invariant_redundantly".toCharArray(),
    "loop_invariant".toCharArray(),
    "loop_invariant_redundantly".toCharArray(),
    "maintaining".toCharArray(),
    "maintaining_redundantly".toCharArray(),
    "maps".toCharArray(),
    "maps_redundantly".toCharArray(),
    "measured_by".toCharArray(),
    "measured_by_redundantly".toCharArray(),
    "method".toCharArray(),
    "model".toCharArray(),
    "model_program".toCharArray(),
    "modifiable".toCharArray(),
    "modifiable_redundantly".toCharArray(),
    "modifies".toCharArray(),
    "modifies_redundantly".toCharArray(),
    "monitored".toCharArray(),
    "monitors_for".toCharArray(),
    "non_null".toCharArray(),
    "non_null_by_default".toCharArray(),
    "normal_behavior".toCharArray(),
    "normal_behaviour".toCharArray(),
    "normal_example".toCharArray(),
    "nullable".toCharArray(),
    "nullable_by_default".toCharArray(),
    "old".toCharArray(),
    "or".toCharArray(),
    "post".toCharArray(),
    "post_redundantly".toCharArray(),
    "pre".toCharArray(),
    "pre_redundantly".toCharArray(),
    "query".toCharArray(),
    "readable".toCharArray(),
    "refine".toCharArray(),
    "refines".toCharArray(),
    "refining".toCharArray(),
    "represents".toCharArray(),
    "represents_redundantly".toCharArray(),
    "requires".toCharArray(),
    "requires_redundantly".toCharArray(),
    "returns".toCharArray(),
    "returns_redundantly".toCharArray(),
    "secret".toCharArray(),
    "set".toCharArray(),
    "signals".toCharArray(),
    "signals_only".toCharArray(),
    "signals_only_redundantly".toCharArray(),
    "signals_redundantly".toCharArray(),
    "spec_bigint_math".toCharArray(),
    "spec_java_math".toCharArray(),
    "spec_protected".toCharArray(),
    "spec_public".toCharArray(),
    "spec_safe_math".toCharArray(),
    "static_initializer".toCharArray(),
    "uninitialized".toCharArray(),
    "unreachable".toCharArray(),
    "weakly".toCharArray(),
    "when".toCharArray(),
    "when_redundantly".toCharArray(),
    "working_space".toCharArray(),
    "working_space_redundantly".toCharArray(),
    "writable".toCharArray()
  };

    private static final int[][] T1 = {
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,419,-1,-1,402,-1,397,74,448,190,135,133,92,387,205,-1,-1,169,281,352,277,65,234,46,406,281,467,292,490,-1,-1,-1},
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,76,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,416,0,159,333,123,93,-1,444,200,93,-1,243,298,283,6,199,-1,75,83,336,175,-1,474,367,33,-1},
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,253,-1,-1,-1,-1,-1,426,-1,348,228,287,257,26,146,421,448,256,-1,-1,31,-1,119,118,203,108,151,469,363,18,256,165,314,184,-1},
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,467,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,422,-1,395,429,390,429,142,234,30,292,140,-1,481,196,470,389,312,306,-1,117,443,356,92,282,97,445,-1,-1},
    {436,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,264,-1,64,-1,251,78,360,303,64,393,398,-1,1,153,454,369,424,304,-1,416,35,1,279,380,58,-1,440,-1},
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,214,-1,449,423,175,448,197,169,141,359,467,436,-1,49,291,205,482,370,-1,375,371,213,119,-1,-1,390,406,-1},
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,51,-1,332,487,125,244,290,190,260,454,426,-1,-1,247,40,74,283,14,-1,68,439,178,48,-1,-1,-1,330,-1},
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,55,-1,154,158,130,389,463,114,115,229,401,-1,-1,345,362,290,405,350,-1,442,168,110,125,65,-1,-1,442,-1},
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,101,-1,63,39,3,404,246,145,-1,-1,349,-1,-1,402,144,256,162,240,-1,290,81,9,439,-1,-1,482,213,6},
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,150,-1,292,83,-1,468,333,93,294,335,76,-1,-1,165,-1,65,456,451,-1,324,481,270,-1,-1,-1,-1,-1,400},
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,100,-1,279,-1,295,397,187,59,281,-1,68,-1,-1,417,160,262,330,283,-1,98,158,139,383,-1,-1,-1,217,491},
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,266,-1,158,-1,90,235,368,486,-1,140,42,-1,-1,-1,405,146,-1,131,-1,208,318,457,181,181,-1,-1,232,-1},
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,165,-1,216,403,233,203,94,-1,-1,-1,132,-1,-1,384,247,465,15,-1,-1,71,-1,295,69,-1,-1,-1,-1,274},
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,13,-1,339,-1,-1,148,297,-1,-1,294,-1,-1,-1,415,-1,417,78,-1,-1,171,-1,350,32,-1,-1,363,74,-1},
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,293,-1,301,-1,-1,173,381,93,-1,126,381,-1,-1,106,-1,172,-1,-1,-1,199,-1,364,74,-1,-1,-1,220,-1},
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,261,-1,-1,306,214,-1,-1,342,-1,-1,-1,-1,342,176,-1,-1,-1,199,115,464,311,-1,-1,-1,96,139},
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,338,-1,-1,474,281,-1,-1,-1,-1,-1,-1,329,-1,403,-1,161,-1,-1,-1,246,343,206,-1,-1,-1,-1},
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,25,-1,-1,478,-1,-1,-1,-1,292,-1,-1,478,-1,366,-1,-1,-1,243,-1,152,89,-1,-1,-1,142,-1},
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,418,-1,-1,262,176,-1,-1,-1,-1,-1,-1,376,-1,204,110,-1,-1,-1,-1,99,281,-1,-1,-1,303,-1},
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,294,-1,-1,95,-1,-1,-1,-1,-1,-1,-1,53,-1,178,-1,-1,-1,332,-1,287,90,-1,-1,-1,284,-1},
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,270,-1,-1,120,-1,-1,-1,-1,-1,-1,-1,251,-1,2,-1,-1,-1,275,-1,320,-1,-1,-1,-1,199,-1},
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,429,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,474,-1,86,-1,-1,-1,-1,-1,486,-1,-1,-1,-1,423,-1},
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,116,-1,200,-1,-1,-1,-1,-1,367,-1,-1,-1,-1,185,-1},
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,168,-1,-1,-1,-1,-1,-1,-1,317,-1,-1,-1,-1,162,-1},
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,68,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,239,-1},
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,44,-1}
    };
    private static final int[][] T2 = {
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,267,-1,-1,139,-1,474,356,354,350,48,269,313,261,326,-1,-1,322,60,102,124,321,124,53,402,234,111,252,231,-1,-1,-1},
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,218,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,260,307,293,25,197,268,-1,124,235,28,-1,397,418,224,95,171,-1,351,99,314,141,-1,320,126,426,-1},
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,114,-1,-1,-1,-1,-1,227,-1,288,126,180,248,370,53,416,0,52,-1,-1,378,-1,77,319,409,392,323,319,423,196,12,174,370,161,-1},
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,355,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,110,-1,219,334,269,399,483,33,192,289,306,-1,422,376,229,276,269,135,-1,9,101,98,450,35,82,15,-1,-1},
    {446,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,5,-1,379,-1,362,215,159,264,466,419,401,-1,150,388,227,83,46,426,-1,423,450,345,162,76,53,-1,101,-1},
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,333,-1,147,490,175,146,140,157,236,90,65,309,-1,282,279,299,371,246,-1,131,391,413,201,-1,-1,435,252,-1},
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,29,-1,167,113,80,302,82,373,419,24,99,-1,-1,437,122,61,141,478,-1,317,491,87,65,-1,-1,-1,245,-1},
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,280,-1,426,414,212,201,303,389,105,264,87,-1,-1,433,20,17,185,166,-1,296,143,159,285,388,-1,-1,453,-1},
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,313,-1,262,100,372,404,410,191,-1,-1,309,-1,-1,23,230,259,140,230,-1,355,320,145,192,-1,-1,392,19,314},
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,285,-1,12,403,-1,109,187,468,473,463,457,-1,-1,398,-1,60,184,108,-1,410,349,377,-1,-1,-1,-1,-1,383},
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,451,-1,160,-1,125,473,394,126,364,-1,259,-1,-1,195,285,188,392,457,-1,413,123,214,145,-1,-1,-1,348,462},
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,58,-1,483,-1,216,322,372,249,-1,385,281,-1,-1,-1,277,328,-1,371,-1,259,185,171,149,450,-1,-1,335,-1},
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,374,-1,366,151,381,116,367,-1,-1,-1,466,-1,-1,454,43,174,422,-1,-1,432,-1,181,415,-1,-1,-1,-1,352},
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,219,-1,249,-1,-1,188,264,-1,-1,36,-1,-1,-1,43,-1,115,304,-1,-1,392,-1,59,274,-1,-1,475,246,-1},
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,330,-1,99,-1,-1,119,310,243,-1,40,291,-1,-1,470,-1,362,-1,-1,-1,115,-1,4,120,-1,-1,-1,52,-1},
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,322,-1,-1,459,138,-1,-1,237,-1,-1,-1,-1,212,78,-1,-1,-1,370,255,120,385,-1,-1,-1,396,394},
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,350,-1,-1,449,342,-1,-1,-1,-1,-1,-1,105,-1,252,-1,488,-1,-1,-1,310,448,405,-1,-1,-1,-1},
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,29,-1,-1,15,-1,-1,-1,-1,67,-1,-1,1,-1,435,-1,-1,-1,460,-1,87,185,-1,-1,-1,0,-1},
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,398,-1,-1,372,168,-1,-1,-1,-1,-1,-1,109,-1,409,86,-1,-1,-1,-1,19,290,-1,-1,-1,335,-1},
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,184,-1,-1,474,-1,-1,-1,-1,-1,-1,-1,54,-1,286,-1,-1,-1,223,-1,172,236,-1,-1,-1,50,-1},
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,439,-1,-1,307,-1,-1,-1,-1,-1,-1,-1,138,-1,430,-1,-1,-1,283,-1,380,-1,-1,-1,-1,437,-1},
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,151,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,68,-1,235,-1,-1,-1,-1,-1,216,-1,-1,-1,-1,80,-1},
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,56,-1,251,-1,-1,-1,-1,-1,318,-1,-1,-1,-1,457,-1},
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,214,-1,-1,-1,-1,-1,-1,-1,491,-1,-1,-1,-1,302,-1},
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,101,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,301,-1},
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,143,-1}
    };

  private static final int MAX_NODE_NUM = 303;
  private static final int gIndex(int n) {
    switch(n) {
    case 354:
    case 39:
    case 244:
    case 293:
    case 79:
    case 120:
    case 491:
    case 373:
    case 33:
    case 376:
    case 196:
    case 9:
    case 295:
    case 16:
    case 398:
    case 290:
    case 281:
    case 298:
    case 318:
    case 372:
    case 262:
    case 268:
    case 121:
    case 69:
    case 24:
    case 48:
    case 426:
    case 97:
    case 429:
    case 113:
    case 175:
    case 10:
    case 288:
    case 207:
    case 385:
    case 436:
    case 343:
    case 466:
    case 346:
    case 36:
    case 257:
    case 446:
    case 130:
    case 158:
    case 393:
    case 84:
    case 228:
    case 6:
    case 309:
    case 251:
    case 386:
    case 320:
    case 78:
    case 256:
    case 165:
    case 156:
    case 456:
    case 460:
    case 357:
    case 14:
    case 76:
    case 92:
    case 292:
    case 193:
    case 455:
    case 219:
    case 424:
    case 174:
      return 0;
    case 243:
      return 1;
    case 37:
      return 2;
    case 462:
      return 3;
    case 212:
      return 4;
    case 432:
      return 5;
    case 42:
      return 36;
    case 249:
      return 206;
    case 283:
      return 7;
    case 41:
      return 221;
    case 114:
      return 23;
    case 480:
      return 9;
    case 75:
      return 200;
    case 216:
      return 46;
    case 366:
      return 11;
    case 445:
      return 12;
    case 27:
      return 13;
    case 5:
      return 120;
    case 263:
      return 130;
    case 324:
      return 15;
    case 399:
      return 154;
    case 183:
      return 98;
    case 204:
      return 17;
    case 395:
      return 66;
    case 239:
      return 188;
    case 73:
      return 19;
    case 195:
      return 20;
    case 116:
      return 21;
    case 102:
      return 22;
    case 163:
      return 164;
    case 100:
      return 95;
    case 171:
      return 24;
    case 457:
      return 226;
    case 176:
      return 35;
    case 359:
      return 132;
    case 481:
      return 130;
    case 365:
      return 27;
    case 194:
      return 13;
    case 323:
      return 29;
    case 148:
      return 73;
    case 473:
      return 193;
    case 13:
      return 31;
    case 404:
      return 32;
    case 261:
      return 185;
    case 157:
      return 84;
    case 226:
      return 64;
    case 253:
      return 36;
    case 64:
      return 235;
    case 331:
      return 223;
    case 405:
      return 49;
    case 296:
      return 20;
    case 167:
      return 38;
    case 284:
      return 54;
    case 297:
      return 40;
    case 369:
      return 92;
    case 215:
      return 20;
    case 51:
      return 194;
    case 202:
      return 85;
    case 199:
      return 44;
    case 358:
      return 125;
    case 382:
      return 156;
    case 134:
      return 77;
    case 340:
      return 205;
    case 338:
      return 47;
    case 440:
      return 235;
    case 19:
      return 49;
    case 141:
      return 30;
    case 410:
      return 20;
    case 280:
      return 52;
    case 254:
      return 53;
    case 306:
      return 54;
    case 126:
      return 55;
    case 270:
      return 64;
    case 450:
      return 228;
    case 234:
      return 109;
    case 347:
      return 184;
    case 3:
      return 58;
    case 351:
      return 59;
    case 387:
      return 60;
    case 416:
      return 61;
    case 129:
      return 62;
    case 266:
      return 63;
    case 356:
      return 57;
    case 326:
      return 96;
    case 258:
      return 34;
    case 34:
      return 67;
    case 123:
      return 115;
    case 485:
      return 189;
    case 231:
      return 34;
    case 355:
      return 71;
    case 65:
      return 127;
    case 469:
      return 181;
    case 482:
      return 62;
    case 26:
      return 11;
    case 332:
      return 74;
    case 486:
      return 75;
    case 66:
      return 76;
    case 4:
      return 10;
    case 378:
      return 136;
    case 29:
      return 178;
    case 32:
      return 79;
    case 40:
      return 145;
    case 106:
      return 171;
    case 200:
      return 81;
    case 250:
      return 77;
    case 82:
      return 83;
    case 479:
      return 84;
    case 23:
      return 85;
    case 189:
      return 86;
    case 155:
      return 87;
    case 260:
      return 25;
    case 139:
      return 63;
    case 98:
      return 97;
    case 339:
      return 42;
    case 380:
      return 50;
    case 419:
      return 68;
    case 209:
      return 92;
    case 49:
      return 233;
    case 119:
      return 96;
    case 144:
      return 144;
    case 367:
      return 98;
    case 58:
      return 82;
    case 72:
      return 112;
    case 20:
      return 224;
    case 289:
      return 101;
    case 299:
      return 102;
    case 52:
      return 41;
    case 304:
      return 104;
    case 475:
      return 105;
    case 131:
      return 83;
    case 99:
      return 107;
    case 218:
      return 140;
    case 238:
      return 204;
    case 334:
      return 46;
    case 430:
      return 74;
    case 322:
      return 61;
    case 437:
      return 10;
    case 185:
      return 75;
    case 294:
      return 2;
    case 127:
      return 35;
    case 233:
      return 73;
    case 310:
      return 104;
    case 164:
      return 17;
    case 152:
      return 111;
    case 125:
      return 219;
    case 361:
      return 132;
    case 391:
      return 146;
    case 170:
      return 215;
    case 25:
      return 126;
    case 350:
      return 170;
    case 105:
      return 33;
    case 180:
      return 130;
    case 487:
      return 33;
    case 101:
      return 133;
    case 402:
      return 155;
    case 118:
      return 74;
    case 137:
      return 61;
    case 285:
      return 206;
    case 368:
      return 166;
    case 191:
      return 11;
    case 305:
      return 118;
    case 154:
      return 139;
    case 44:
      return 140;
    case 80:
      return 106;
    case 205:
      return 142;
    case 188:
      return 146;
    case 465:
      return 144;
    case 384:
      return 145;
    case 172:
      return 146;
    case 327:
      return 61;
    case 488:
      return 86;
    case 444:
      return 148;
    case 476:
      return 166;
    case 81:
      return 150;
    case 63:
      return 116;
    case 484:
      return 132;
    case 147:
      return 215;
    case 198:
      return 158;
    case 415:
      return 29;
    case 140:
      return 162;
    case 277:
      return 229;
    case 62:
      return 165;
    case 342:
      return 166;
    case 336:
      return 71;
    case 169:
      return 171;
    case 60:
      return 87;
    case 122:
      return 173;
    case 117:
      return 121;
    case 85:
      return 165;
    case 210:
      return 176;
    case 21:
      return 177;
    case 381:
      return 80;
    case 112:
      return 180;
    case 107:
      return 173;
    case 177:
      return 183;
    case 8:
      return 169;
    case 489:
      return 16;
    case 353:
      return 186;
    case 223:
      return 157;
    case 279:
      return 188;
    case 235:
      return 189;
    case 11:
      return 27;
    case 291:
      return 224;
    case 168:
      return 168;
    case 400:
      return 196;
    case 146:
      return 92;
    case 221:
      return 198;
    case 352:
      return 95;
    case 341:
      return 169;
    case 115:
      return 202;
    case 166:
      return 121;
    case 86:
      return 206;
    case 431:
      return 199;
    case 335:
      return 149;
    case 124:
      return 212;
    case 329:
      return 74;
    case 208:
      return 48;
    case 45:
      return 154;
    case 30:
      return 216;
    case 38:
      return 21;
    case 0:
      return 41;
    case 439:
      return 191;
    case 47:
      return 28;
    case 89:
      return 223;
    case 421:
      return 2;
    case 190:
      return 219;
    case 133:
      return 222;
    case 286:
      return 52;
    case 87:
      return 225;
    case 453:
      return 30;
    case 313:
      return 64;
    case 302:
      return 230;
    case 17:
      return 204;
    case 315:
      return 225;
    case 197:
      return 10;
    case 406:
      return 235;
    default:
      return -1;
    }
  }


  private static final boolean equals(final char[] key, int offset, int length, final char[] word) {
    if (word.length != length) {
      return false;
    } else {
      for (int i = 0; i < length; i++) {
	 if (word[i] != key[offset + i]) {
	   return false;
	 }
      }
      return true;
    }
  }

  private static final int hash(final char[] key, int offset, int length) {
    int		f1 = 0;
    int		f2 = 0;

    for (int i = 0; i < length; i++) {
      char	c = key[i + offset];

      if (c < MIN_CHAR_VAL || c > MAX_CHAR_VAL) {
	return -1;
      }

      int	t1 = T1[i][c - MIN_CHAR_VAL];
      if (t1 == -1) {
	return -1;
      }

      int	t2 = T2[i][c - MIN_CHAR_VAL];
      if (t2 == -1) {
	return -1;
      }

      f1 += t1;
      f2 += t2;
    }

    f1 %= MAX_GRAPH_NODE_VAL;
    f2 %= MAX_GRAPH_NODE_VAL;

    return (gIndex(f1)+gIndex(f2)) % TOTAL_KEYWORDS;
  }

  private static final int find(final char[] key, int offset, int length) {
    if (length <= MAX_WORD_LENG && length >= MIN_WORD_LENG) {
      int	ind = hash(key, offset, length);

      if (ind < TOTAL_KEYWORDS && ind >= 0) {
	if (equals(key, offset, length, keywords[ind])) {
	  return ind;
	}
      }
    }
    return -1;
  }

 // CODE GENERATED BY JPERF ENDS HERE
 // --------------------------------------------------------------------

}
